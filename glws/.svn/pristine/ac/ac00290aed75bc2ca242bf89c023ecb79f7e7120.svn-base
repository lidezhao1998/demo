package com.ruoyi.zaihai.ReserveManagement.controller;

import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.core.page.TableDataInfo;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.common.utils.poi.ExcelUtil;
import com.ruoyi.zaihai.ReserveManagement.domain.KAllocation;
import com.ruoyi.zaihai.ReserveManagement.service.IKAllocationService;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * 调拨单Controller
 * 
 * @author ruoyi
 * @date 2020-06-30
 */
@Controller
@RequestMapping("/reserves/allocation")
public class KAllocationController extends BaseController
{
    private String prefix = "ReserveManagement/allocation";

    @Autowired
    private IKAllocationService kAllocationService;

    @RequiresPermissions("reserves:allocation:view")
    @GetMapping()
    public String allocation()
    {
        return prefix + "/allocation";
    }


    /**
     * 查询调拨单列表
     */
    @RequiresPermissions("reserves:allocation:list")
    @PostMapping("/list")
    @ResponseBody
    public TableDataInfo list(KAllocation kAllocation)
    {
        startPage();
        List<KAllocation> list = kAllocationService.selectKAllocationList(kAllocation);
        return getDataTable(list);
    }

    /**
     * 导出调拨单列表
     */
    @RequiresPermissions("reserves:allocation:export")
    @PostMapping("/export")
    @ResponseBody
    public AjaxResult export(KAllocation kAllocation)
    {
        List<KAllocation> list = kAllocationService.selectKAllocationList(kAllocation);
        ExcelUtil<KAllocation> util = new ExcelUtil<KAllocation>(KAllocation.class);
        return util.exportExcel(list, "allocation");
    }

    /**
     * 新增调拨单
     */
    @GetMapping("/add")
    public String add()
    {
        return prefix + "/add";
    }

    /**
     * 新增保存调拨单
     */
    @RequiresPermissions("reserves:allocation:add")
    @Log(title = "调拨单", businessType = BusinessType.INSERT)
    @PostMapping("/add")
    @ResponseBody
    public AjaxResult addSave(KAllocation kAllocation)
    {
        kAllocation.setStatus("1");
        return toAjax(kAllocationService.insertKAllocation(kAllocation));
    }

    /**
     * 新增上报调拨单
     */
    @RequiresPermissions("reserves:allocation:add")
    @Log(title = "调拨单", businessType = BusinessType.INSERT)
    @PostMapping("/addReport")
    @ResponseBody
    public AjaxResult addReport(KAllocation kAllocation)
    {
        kAllocation.setStatus("2");
        return toAjax(kAllocationService.insertKAllocation(kAllocation));
    }


    /**
     * 修改调拨单
     */
    @GetMapping("/edit/{id}")
    public String edit(@PathVariable("id") Long id, ModelMap mmap)
    {
        KAllocation kAllocation = kAllocationService.selectKAllocationById(id);
        mmap.put("kAllocation", kAllocation);
        return prefix + "/edit";
    }

    /**
     * 修改保存调拨单
     */
    @RequiresPermissions("reserves:allocation:edit")
    @Log(title = "调拨单", businessType = BusinessType.UPDATE)
    @PostMapping("/edit")
    @ResponseBody
    public AjaxResult editSave(KAllocation kAllocation)
    {
        return toAjax(kAllocationService.updateKAllocation(kAllocation));
    }

    /**
     * 删除调拨单
     */
    @RequiresPermissions("reserves:allocation:remove")
    @Log(title = "调拨单", businessType = BusinessType.DELETE)
    @PostMapping( "/remove")
    @ResponseBody
    public AjaxResult remove(String ids)
    {
        return toAjax(kAllocationService.deleteKAllocationByIds(ids));
    }

    /**
     * 上报调拨单
     */
    @Log(title = "上报操作", businessType = BusinessType.UPDATE)
    @PostMapping("/cancel")
    @ResponseBody
    public AjaxResult updateAllocation  (long id)
    {
        //判断状态为待上报
        return toAjax(kAllocationService.updateAllocation(id));
    }

    /**
     * 查看库详细信息
     */
    @RequiresPermissions("reserves:allocation:detail")
    @GetMapping("/detail/{id}")
    public String detail(@PathVariable("id") Long id, ModelMap mmap, KAllocation kAllocation)
    {
        KAllocation KAllocation = kAllocationService.selectKAllocationById(id);
        if(KAllocation.getStatus().equals("1")){
            KAllocation.setStatus("待上报");
        }else if(KAllocation.getStatus().equals("2")){
            KAllocation.setStatus("审核中");
        }else if(KAllocation.getStatus().equals("3")){
            KAllocation.setStatus("已上报");
        }else{
            KAllocation.setStatus("驳回");

        }
        mmap.put("kAllocation", KAllocation);
        return prefix + "/look";
    }

    /**
     * 查看库详细信息
     */
    @RequiresPermissions("reserves:allocation:report")
    @GetMapping("/report/{id}")
    public String report(@PathVariable("id") Long id, ModelMap mmap, KAllocation kAllocation)
    {
        KAllocation KAllocation = kAllocationService.selectKAllocationById(id);
        mmap.put("kAllocation", KAllocation);
        return prefix + "/report";
    }


}
